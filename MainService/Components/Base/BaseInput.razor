@typeparam TParam;

<div class="@(Css ?? "input-component")">
    <label for="@_id">@Label</label>
    <input class="input" id="@_id" type="@Type" @onchange="OnChangedValue" value="@InputValue" />
</div>

@code {
    [Parameter]
    public string InputValue { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string Type { get; set; } = "text";

    [Parameter]
    public EventCallback<TParam> OnChanged { get; set; }

    private readonly string _id;

    [Parameter]
    public string Css { get; set; }

    public BaseInput()
    {
        _id = Guid.NewGuid().ToString();
    }

    private async Task OnChangedValue(ChangeEventArgs val)
    {
        if (!string.IsNullOrEmpty(val.Value?.ToString()))
        {
            var result = (TParam)Convert.ChangeType(val.Value, typeof(TParam));
            await OnChanged.InvokeAsync(result);
        }
    } 

    /*
     * 
    Need to inspect why whis way not working.
    a) previous version of dotnet works fine
    b) namespace is correct and direct put not helps
    c) generated files looks fine
    d) Dependently  problem with @inherits BaseInput<bool> others way work good
     * @inherits BaseInput<bool>

    @{
    base.BuildRenderTree(__builder);
    }

    @code {
    protected override string Type { get; set; } = "checkbox";
    protected override string Css { get; set; } = "checkbox-component";
    }
    */
}
